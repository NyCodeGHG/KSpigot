{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KSpigot \u00b6 KSpigot extends Spigot (and all of its forks) with additional functionality. This reaches from small extension functions, to features making use of Kotlin's language features and finally to bigger APIs (e.g. the GUI API). KSpigot is at home on GitHub . Feel free to contribute to the project. Setup \u00b6 In order to get started, follow the setup guide . Contribute to this documentation \u00b6 Contributions to the documentation are welcome, as it is written by the community itself. Create a fork of KSpigot and add new markdown files to guide/docs/ , commit and push the changes and then create a pull request to the main project.","title":"Home"},{"location":"#kspigot","text":"KSpigot extends Spigot (and all of its forks) with additional functionality. This reaches from small extension functions, to features making use of Kotlin's language features and finally to bigger APIs (e.g. the GUI API). KSpigot is at home on GitHub . Feel free to contribute to the project.","title":"KSpigot"},{"location":"#setup","text":"In order to get started, follow the setup guide .","title":"Setup"},{"location":"#contribute-to-this-documentation","text":"Contributions to the documentation are welcome, as it is written by the community itself. Create a fork of KSpigot and add new markdown files to guide/docs/ , commit and push the changes and then create a pull request to the main project.","title":"Contribute to this documentation"},{"location":"extensions/listener/","text":"Register an event listener \u00b6 Using the listen function \u00b6 You can register an event listener by calling the following function anywhere you want. listen < EventClass > { doSomething () } The event instance will be passed in as it , but you can change this: listen < PlayerMoveEvent > { moveEvent -> moveEvent . player . kick ( \"Do not move!\" ) broadcast ( \" ${ moveEvent . player } moved :/\" ) } The listen function returns the Listener instance, which allows you to perform operations on it later. For example you could listen to a specific event temporarily: val moveEventListener = listen < PlayerMoveEvent > { it . player . kick ( \"Do not move!\" ) } // e.g. unregister the listener after some time taskRunLater ( 20 * 5 ) { moveEventListener . unregister () } Register an existing Listener instance \u00b6 There is an extension function which registers a Listener instance: listenerInstance . register () Unregister a Listener \u00b6 Just call listenerInstance.unregister()","title":"Event listener"},{"location":"extensions/listener/#register-an-event-listener","text":"","title":"Register an event listener"},{"location":"extensions/listener/#using-the-listen-function","text":"You can register an event listener by calling the following function anywhere you want. listen < EventClass > { doSomething () } The event instance will be passed in as it , but you can change this: listen < PlayerMoveEvent > { moveEvent -> moveEvent . player . kick ( \"Do not move!\" ) broadcast ( \" ${ moveEvent . player } moved :/\" ) } The listen function returns the Listener instance, which allows you to perform operations on it later. For example you could listen to a specific event temporarily: val moveEventListener = listen < PlayerMoveEvent > { it . player . kick ( \"Do not move!\" ) } // e.g. unregister the listener after some time taskRunLater ( 20 * 5 ) { moveEventListener . unregister () }","title":"Using the listen function"},{"location":"extensions/listener/#register-an-existing-listener-instance","text":"There is an extension function which registers a Listener instance: listenerInstance . register ()","title":"Register an existing Listener instance"},{"location":"extensions/listener/#unregister-a-listener","text":"Just call listenerInstance.unregister()","title":"Unregister a Listener"},{"location":"extensions/tasks/","text":"The general task function \u00b6 The task function is very powerful. It connects almost all kinds of Spigot tasks and even adds additional features on top. You define its behaviour by providing the following parameters (all are optional and have default values): Parameter Description sync if the runnable should run sync (true) or async (false) delay the delay (in ticks) until the first execution of the task period at which interval (in ticks) the task should be repeated howOften how many times the task should be executed - null for infinite execution endCallback code that should always be executed when the runnable ends safe if the endCallback of the runnable should always be executed, even if the server shuts down or the runnable ends prematurely runnable the runnable which should be executed each repetition The body of task function is the runnable parameter. This runnable provides an instance of KSpigotRunnable , which inherits from BukkitRunnable , but adds counters on top. These counters are: counterUp counterDownToOne counterDownToZero An example would be: task ( sync = false , delay = 25 , period = 20 , howOften = 5 ) { println ( it . counterUp ) // starting from zero println ( it . counterDownToOne ) // starting from howOften println ( it . counterDownToZero ) // starting from howOften - 1 } Switch between synchronous and asynchronous execution \u00b6 You can simply use the sync and async function. sync { println ( \"now sync\" ) async { println ( \"now async\" ) sync { println ( \"now sync again\" ) } } } Alternatively, if you want to specify wether a task should be executed sync or async using a parameter, you can use the taskRun function, which has a sync parameter. Other (simpler) task functions \u00b6 Run a task later \u00b6 You can use taskRunLater . This function executes the given runnable with the given delay . Either sync or async (specified by the sync parameter).","title":"Tasks"},{"location":"extensions/tasks/#the-general-task-function","text":"The task function is very powerful. It connects almost all kinds of Spigot tasks and even adds additional features on top. You define its behaviour by providing the following parameters (all are optional and have default values): Parameter Description sync if the runnable should run sync (true) or async (false) delay the delay (in ticks) until the first execution of the task period at which interval (in ticks) the task should be repeated howOften how many times the task should be executed - null for infinite execution endCallback code that should always be executed when the runnable ends safe if the endCallback of the runnable should always be executed, even if the server shuts down or the runnable ends prematurely runnable the runnable which should be executed each repetition The body of task function is the runnable parameter. This runnable provides an instance of KSpigotRunnable , which inherits from BukkitRunnable , but adds counters on top. These counters are: counterUp counterDownToOne counterDownToZero An example would be: task ( sync = false , delay = 25 , period = 20 , howOften = 5 ) { println ( it . counterUp ) // starting from zero println ( it . counterDownToOne ) // starting from howOften println ( it . counterDownToZero ) // starting from howOften - 1 }","title":"The general task function"},{"location":"extensions/tasks/#switch-between-synchronous-and-asynchronous-execution","text":"You can simply use the sync and async function. sync { println ( \"now sync\" ) async { println ( \"now async\" ) sync { println ( \"now sync again\" ) } } } Alternatively, if you want to specify wether a task should be executed sync or async using a parameter, you can use the taskRun function, which has a sync parameter.","title":"Switch between synchronous and asynchronous execution"},{"location":"extensions/tasks/#other-simpler-task-functions","text":"","title":"Other (simpler) task functions"},{"location":"extensions/tasks/#run-a-task-later","text":"You can use taskRunLater . This function executes the given runnable with the given delay . Either sync or async (specified by the sync parameter).","title":"Run a task later"},{"location":"setup/beginners/","text":"For absolute beginners \u00b6 There are several things required to get started with KSpigot. Kotlin \u00b6 Kotlin is requirement for using KSpigot, as it is made for use with the Kotlin programming language. You can start learning Kotlin with the official docs or by using the Kotlin Playground . Gradle \u00b6 You should be able to use Gradle as your build system, although you do not have to understand to much of it. Probably it will even work if you just copy and paste the snippets this guide provides. Spigot \u00b6 Spigot is just an API, meaning that if you are able to use Kotlin, you will be able to use an API like Spigot and KSpigot. Nevertheless, it is good to know at least something about the Spigot API. The Spigot API documentation can be found here .","title":"Requirements"},{"location":"setup/beginners/#for-absolute-beginners","text":"There are several things required to get started with KSpigot.","title":"For absolute beginners"},{"location":"setup/beginners/#kotlin","text":"Kotlin is requirement for using KSpigot, as it is made for use with the Kotlin programming language. You can start learning Kotlin with the official docs or by using the Kotlin Playground .","title":"Kotlin"},{"location":"setup/beginners/#gradle","text":"You should be able to use Gradle as your build system, although you do not have to understand to much of it. Probably it will even work if you just copy and paste the snippets this guide provides.","title":"Gradle"},{"location":"setup/beginners/#spigot","text":"Spigot is just an API, meaning that if you are able to use Kotlin, you will be able to use an API like Spigot and KSpigot. Nevertheless, it is good to know at least something about the Spigot API. The Spigot API documentation can be found here .","title":"Spigot"},{"location":"setup/entrypoint/","text":"The entrypoint in KSpigot is a class which represents the main class of your plugin. Type of the main class Please note that due to a limitation of Spigot, your main class has to be a class , it cannot be an object or anything else. Create the main class \u00b6 Create a new file at src/main/kotlin/your/package/structure/ and call it (for example) Manager . Add the following class to the file: class InternalMainClass : KSpigot () { override fun load () { } override fun startup () { } override fun shutdown () { } } Coming from spigot? When using KSpigot do not inherit from JavaPlugin , inherit from KSpigot instead. Also, please note that: onLoad becomes load onEnable becomes startup onDisable becomes shutdown Make it globally available \u00b6 As noted above you cannot use object for the main class. Fortunately, due to the fact that there should always only exist one instance of your main class, you can provide it globally by building the main class as follows: class InternalMainClass : KSpigot () { companion object { lateinit var INSTANCE : InternalMainClass ; private set } override fun load () { INSTANCE = this } override fun startup () { } override fun shutdown () { } } val Manager by lazy { InternalMainClass . INSTANCE }","title":"Entrypoint to your plugin"},{"location":"setup/entrypoint/#create-the-main-class","text":"Create a new file at src/main/kotlin/your/package/structure/ and call it (for example) Manager . Add the following class to the file: class InternalMainClass : KSpigot () { override fun load () { } override fun startup () { } override fun shutdown () { } } Coming from spigot? When using KSpigot do not inherit from JavaPlugin , inherit from KSpigot instead. Also, please note that: onLoad becomes load onEnable becomes startup onDisable becomes shutdown","title":"Create the main class"},{"location":"setup/entrypoint/#make-it-globally-available","text":"As noted above you cannot use object for the main class. Fortunately, due to the fact that there should always only exist one instance of your main class, you can provide it globally by building the main class as follows: class InternalMainClass : KSpigot () { companion object { lateinit var INSTANCE : InternalMainClass ; private set } override fun load () { INSTANCE = this } override fun startup () { } override fun shutdown () { } } val Manager by lazy { InternalMainClass . INSTANCE }","title":"Make it globally available"},{"location":"setup/gradle/","text":"The following code snippets can be used in your build.gradle.kts file. Gradle configuration \u00b6 Java version \u00b6 Configuring the Java version is nothing specific to KSpigot, it should always be done. It is listed in this guide anyways, because a lot of beginners forget to do this - and then get confused about not being able to use inline functions. val javaVersion = 8 // change this to your Java version tasks . compileJava { options . release . set ( javaVersion ) } tasks . compileKotlin { kotlinOptions . jvmTarget = if ( javaVersion < 9 ) \"1. $ javaVersion \" else \" $ javaVersion \" } Add the Spigot dependency \u00b6 You have two options: A add just the Spigot API, if you wish to have a stable API which is built for users B use the regular Spigot dependency which contains the whole Minecraft server code (often called \"nms\" (net.minecraft.server)), as well as the underlying CraftBukkit code - this option gives you a lot more possibilities, but it can also be dangerous A Just the Spigot API \u00b6 KSpigot is an extension for Spigot, you still need the regular Spigot dependency. Add the Spigot Maven repository to your repositories scope: repositories { maven ( \"https://hub.spigotmc.org/nexus/content/repositories/snapshots\" ) } Add the Spigot API dependency to your dependencies scope: dependencies { compileOnly ( \"org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT\" ) } Replace the given version at the end of the dependency notation with the version you want to use. See all versions in the Spigot Maven repository. B The regular Spigot dependency \u00b6 Download the BuildTools to a separate directory, navigate to this directory using your terminal and run java -jar BuildTools.jar in order to generate the .jar file of the Spigot server. This file will be installed to your Maven Local repository automatically, so you can add it as dependency to your project. Additionally, you can copy it to anywhere else and use it to create a server. (More information can be found in the Spigot Wiki ) Add your Maven Local repository to your repositories scope: repositories { mavenLocal () } Add the regular Spigot dependency to your dependencies scope: dependencies { compileOnly ( \"org.spigotmc:spigot:1.16.5-R0.1-SNAPSHOT\" ) } Make sure that the version number before -R0.1-SNAPSHOT matches the version you have just built using the BuildTools. Add KSpigot \u00b6 Add the dependency \u00b6 Add the following repository to your repositories scope: repositories { mavenCentral () maven ( \"https://repo.codemc.io/repository/maven-snapshots/\" ) } Add the KSpigot dependency to your dependencies scope: dependencies { implementation ( \"net.axay\" , \"kspigot\" , \"VERSION\" ) } Replace VERSION with the version you want to use. Latest version (without the v ): Shade KSpigot into your jar file \u00b6 Add the widely used shadow plugin: plugins { id ( \"com.github.johnrengelman.shadow\" ) version \"VERSION\" } Replace VERSION with the version number from the following badge: Relocate KSpigot during the shadow process \u00b6 In order to avoid conflicts with other plugins, you should relocate KSpigot. This can be done using the shadow plugin from the previous step. Configure it like this: tasks { shadowJar { relocate ( \"net.axay.kspigot\" , \"YOURMAINGROUP.shadow.net.axay.kspigot\" ) } } Replace YOURMAINGROUP with the main package structure you use (e.g. org.example. ) Build your final plugin \u00b6 Run the Gradle task called shadowJar . Using IntelliJ IDEA, this can be done using the Gradle sidebar, where you can find the task under Tasks > Shadow > shadowJar . Alternatively, you can also run ./gradlew shadowJar in your terminal.","title":"Setup using Gradle"},{"location":"setup/gradle/#gradle-configuration","text":"","title":"Gradle configuration"},{"location":"setup/gradle/#java-version","text":"Configuring the Java version is nothing specific to KSpigot, it should always be done. It is listed in this guide anyways, because a lot of beginners forget to do this - and then get confused about not being able to use inline functions. val javaVersion = 8 // change this to your Java version tasks . compileJava { options . release . set ( javaVersion ) } tasks . compileKotlin { kotlinOptions . jvmTarget = if ( javaVersion < 9 ) \"1. $ javaVersion \" else \" $ javaVersion \" }","title":"Java version"},{"location":"setup/gradle/#add-the-spigot-dependency","text":"You have two options: A add just the Spigot API, if you wish to have a stable API which is built for users B use the regular Spigot dependency which contains the whole Minecraft server code (often called \"nms\" (net.minecraft.server)), as well as the underlying CraftBukkit code - this option gives you a lot more possibilities, but it can also be dangerous","title":"Add the Spigot dependency"},{"location":"setup/gradle/#a-just-the-spigot-api","text":"KSpigot is an extension for Spigot, you still need the regular Spigot dependency. Add the Spigot Maven repository to your repositories scope: repositories { maven ( \"https://hub.spigotmc.org/nexus/content/repositories/snapshots\" ) } Add the Spigot API dependency to your dependencies scope: dependencies { compileOnly ( \"org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT\" ) } Replace the given version at the end of the dependency notation with the version you want to use. See all versions in the Spigot Maven repository.","title":"A Just the Spigot API"},{"location":"setup/gradle/#b-the-regular-spigot-dependency","text":"Download the BuildTools to a separate directory, navigate to this directory using your terminal and run java -jar BuildTools.jar in order to generate the .jar file of the Spigot server. This file will be installed to your Maven Local repository automatically, so you can add it as dependency to your project. Additionally, you can copy it to anywhere else and use it to create a server. (More information can be found in the Spigot Wiki ) Add your Maven Local repository to your repositories scope: repositories { mavenLocal () } Add the regular Spigot dependency to your dependencies scope: dependencies { compileOnly ( \"org.spigotmc:spigot:1.16.5-R0.1-SNAPSHOT\" ) } Make sure that the version number before -R0.1-SNAPSHOT matches the version you have just built using the BuildTools.","title":"B The regular Spigot dependency"},{"location":"setup/gradle/#add-kspigot","text":"","title":"Add KSpigot"},{"location":"setup/gradle/#add-the-dependency","text":"Add the following repository to your repositories scope: repositories { mavenCentral () maven ( \"https://repo.codemc.io/repository/maven-snapshots/\" ) } Add the KSpigot dependency to your dependencies scope: dependencies { implementation ( \"net.axay\" , \"kspigot\" , \"VERSION\" ) } Replace VERSION with the version you want to use. Latest version (without the v ):","title":"Add the dependency"},{"location":"setup/gradle/#shade-kspigot-into-your-jar-file","text":"Add the widely used shadow plugin: plugins { id ( \"com.github.johnrengelman.shadow\" ) version \"VERSION\" } Replace VERSION with the version number from the following badge:","title":"Shade KSpigot into your jar file"},{"location":"setup/gradle/#relocate-kspigot-during-the-shadow-process","text":"In order to avoid conflicts with other plugins, you should relocate KSpigot. This can be done using the shadow plugin from the previous step. Configure it like this: tasks { shadowJar { relocate ( \"net.axay.kspigot\" , \"YOURMAINGROUP.shadow.net.axay.kspigot\" ) } } Replace YOURMAINGROUP with the main package structure you use (e.g. org.example. )","title":"Relocate KSpigot during the shadow process"},{"location":"setup/gradle/#build-your-final-plugin","text":"Run the Gradle task called shadowJar . Using IntelliJ IDEA, this can be done using the Gradle sidebar, where you can find the task under Tasks > Shadow > shadowJar . Alternatively, you can also run ./gradlew shadowJar in your terminal.","title":"Build your final plugin"},{"location":"setup/project/","text":"In this guide we will assume that you are using or want to use Gradle. Install Java \u00b6 You will need to have the JDK (Java Development Kit) installed. If you do not already have a JDK installed, you have several options: Windows Arch pacman -S jdk-openjdk (refer to the archwiki for other versions) Debian apt install default-jdk (refer to the Debian Wiki for other versions) Please make sure that you know which version of Java you have just installed. If you just have one installation of Java, run java -version to get the current Java version on your system. Create a project \u00b6 In IntelliJ IDEA, click on File > New > Project and choose Gradle on the sidebar in the popup window. Now choose the JDK which you have just installed. If you want to write your gradle build script in Kotlin, make sure to tick the Kotlin DSL build script checkbox. (recommended) Now select Java and Kotlin/JVM as your frameworks. After that, you can create your project. You may now continue with the Setup using Gradle guide. Add the Spigot plugin.yml \u00b6 Create a new file called plugin.yml in the resources directory of your project. Read the official documentation for the Spigot plugin.yml file.","title":"Starting a new project"},{"location":"setup/project/#install-java","text":"You will need to have the JDK (Java Development Kit) installed. If you do not already have a JDK installed, you have several options: Windows Arch pacman -S jdk-openjdk (refer to the archwiki for other versions) Debian apt install default-jdk (refer to the Debian Wiki for other versions) Please make sure that you know which version of Java you have just installed. If you just have one installation of Java, run java -version to get the current Java version on your system.","title":"Install Java"},{"location":"setup/project/#create-a-project","text":"In IntelliJ IDEA, click on File > New > Project and choose Gradle on the sidebar in the popup window. Now choose the JDK which you have just installed. If you want to write your gradle build script in Kotlin, make sure to tick the Kotlin DSL build script checkbox. (recommended) Now select Java and Kotlin/JVM as your frameworks. After that, you can create your project. You may now continue with the Setup using Gradle guide.","title":"Create a project"},{"location":"setup/project/#add-the-spigot-pluginyml","text":"Create a new file called plugin.yml in the resources directory of your project. Read the official documentation for the Spigot plugin.yml file.","title":"Add the Spigot plugin.yml"}]}